name: 'Pull Request Build'

on:
  pull_request_target:
    branches: [ 'main', 'staging' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

defaults:
  run:
    shell: powershell

permissions:
  actions: read
  contents: read
  id-token: write
  pull-requests: write
  issues: write

env:
  workflowDepth: 1
  ALGoOrgSettings: ${{ vars.ALGoOrgSettings }}
  ALGoRepoSettings: ${{ vars.ALGoRepoSettings }}

jobs:
  PregateCheck:
    if: (github.event.pull_request.base.repo.full_name != github.event.pull_request.head.repo.full_name) && (github.event_name != 'pull_request')
    runs-on: windows-latest
    steps:
      - uses: lktraser/AL-Go-Actions/VerifyPRChanges@main

  Initialization:
    needs: [ PregateCheck ]
    if: (!failure() && !cancelled())
    runs-on: [ windows-latest ]
    outputs:
      projects: ${{ steps.determineProjectsToBuild.outputs.ProjectsJson }}
      projectDependenciesJson: ${{ steps.determineProjectsToBuild.outputs.ProjectDependenciesJson }}
      buildOrderJson: ${{ steps.determineProjectsToBuild.outputs.BuildOrderJson }}
      baselineWorkflowRunId: ${{ steps.determineProjectsToBuild.outputs.BaselineWorkflowRunId }}
      baselineWorkflowSHA: ${{ steps.determineProjectsToBuild.outputs.BaselineWorkflowSHA }}
      workflowDepth: ${{ steps.DetermineWorkflowDepth.outputs.WorkflowDepth }}
      artifactsRetentionDays: ${{ steps.DetermineWorkflowDepth.outputs.ArtifactsRetentionDays }}
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
    steps:
      - name: Dump Workflow Information
        uses: lktraser/AL-Go-Actions/DumpWorkflowInfo@main
        with:
          shell: powershell

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true
          ref: ${{ github.event_name == 'pull_request' && github.sha || format('refs/pull/{0}/merge', github.event.pull_request.number) }}

      - name: Initialize the workflow
        id: init
        uses: lktraser/AL-Go-Actions/WorkflowInitialize@main
        with:
          shell: powershell

      - name: Read settings
        id: ReadSettings
        uses: lktraser/AL-Go-Actions/ReadSettings@main
        with:
          shell: powershell
          get: shortLivedArtifactsRetentionDays

      - name: Determine Workflow Depth
        id: DetermineWorkflowDepth
        run: |
          Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "WorkflowDepth=$($env:workflowDepth)"
          Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "ArtifactsRetentionDays=$($env:shortLivedArtifactsRetentionDays)"

      - name: Determine Projects To Build
        id: determineProjectsToBuild
        uses: lktraser/AL-Go-Actions/DetermineProjectsToBuild@main
        with:
          shell: powershell
          maxBuildDepth: ${{ env.workflowDepth }}

  Build:
    needs: [ Initialization ]
    if: (!failure()) && (!cancelled()) && fromJson(needs.Initialization.outputs.buildOrderJson)[0].projectsCount > 0
    strategy:
      matrix:
        include: ${{ fromJson(needs.Initialization.outputs.buildOrderJson)[0].buildDimensions }}
      fail-fast: false
    name: Build ${{ matrix.projectName }} (${{ matrix.buildMode }})
    uses: ./.github/workflows/_BuildALGoProject.yaml
    secrets: inherit
    with:
      shell: ${{ matrix.githubRunnerShell }}
      runsOn: ${{ matrix.githubRunner }}
      checkoutRef: ${{ github.event_name == 'pull_request' && github.sha || format('refs/pull/{0}/merge', github.event.pull_request.number) }}
      project: ${{ matrix.project }}
      projectName: ${{ matrix.projectName }}
      buildMode: ${{ matrix.buildMode }}
      projectDependenciesJson: ${{ needs.Initialization.outputs.projectDependenciesJson }}
      baselineWorkflowRunId: ${{ needs.Initialization.outputs.baselineWorkflowRunId }}
      baselineWorkflowSHA: ${{ needs.Initialization.outputs.baselineWorkflowSHA }}
      secrets: 'licenseFileUrl,keyVaultCertificateUrl,*keyVaultCertificatePassword,keyVaultClientId,gitHubPackagesContext,applicationInsightsConnectionString'
      artifactsRetentionDays: ${{ fromJson(needs.Initialization.outputs.artifactsRetentionDays) }}
      artifactsNameSuffix: ${{ github.event.pull_request.base.ref == 'staging' && 'PR${{ github.event.number }}-Staging' || 'PR${{ github.event.number }}' }}
      useArtifactCache: true

  StatusCheck:
    needs: [ Initialization, Build ]
    if: (!cancelled())
    runs-on: [ windows-latest ]
    name: Pull Request Status Check
    outputs:
      prContainersEnabled: ${{ steps.checkPRContainers.outputs.prContainersEnabled }}
      githubRunner: ${{ steps.ReadSettings.outputs.GitHubRunnerJson }}
      githubRunnerShell: ${{ steps.ReadSettings.outputs.GitHubRunnerShell }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true
          ref: ${{ github.event_name == 'pull_request' && github.sha || format('refs/pull/{0}/merge', github.event.pull_request.number) }}

      - name: Read settings for PR Containers
        id: ReadSettings
        uses: lktraser/AL-Go-Actions/ReadSettings@main
        with:
          shell: powershell
          get: prContainers

      - name: Check PR Containers Enabled
        id: checkPRContainers
        run: |
          $settings = '${{ steps.ReadSettings.outputs.SettingsJson }}' | ConvertFrom-Json
          $enabled = $false
          if ($settings.prContainers -and $settings.prContainers.enabled) {
            $enabled = $settings.prContainers.enabled
          }
          Add-Content -Encoding UTF8 -Path $env:GITHUB_OUTPUT -Value "prContainersEnabled=$enabled"

      - name: Pull Request Status Check
        id: PullRequestStatusCheck
        uses: lktraser/AL-Go-Actions/PullRequestStatusCheck@main
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          shell: powershell

  CreatePRContainer:
    needs: [ Initialization, Build, StatusCheck ]
    if: (!cancelled()) && needs.StatusCheck.outputs.prContainersEnabled == 'true' && github.event.action == 'opened'
    runs-on: ${{ fromJson(needs.StatusCheck.outputs.githubRunner) }}
    name: Create PR Container
    defaults:
      run:
        shell: ${{ needs.StatusCheck.outputs.githubRunnerShell }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true
          ref: ${{ github.event_name == 'pull_request' && github.sha || format('refs/pull/{0}/merge', github.event.pull_request.number) }}

      - name: Read secrets
        id: ReadSecrets
        uses: lktraser/AL-Go-Actions/ReadSecrets@main
        with:
          shell: ${{ needs.StatusCheck.outputs.githubRunnerShell }}
          gitHubSecrets: ${{ toJson(secrets) }}
          getSecrets: 'containerUsername,containerPassword,spUsername,spPassword,TRASERInternalFeedsToken'

      - name: Create PR Container
        id: createContainer
        uses: ./Actions/PRContainer
        with:
          shell: ${{ needs.StatusCheck.outputs.githubRunnerShell }}
          operation: 'create'
          prId: '${{ github.event.number }}'
          postComment: 'true'
        env:
          containerusername: ${{ fromJson(steps.ReadSecrets.outputs.Secrets).containerUsername }}
          containerpassword: ${{ fromJson(steps.ReadSecrets.outputs.Secrets).containerPassword }}
          spusername: ${{ fromJson(steps.ReadSecrets.outputs.Secrets).spUsername }}
          sppassword: ${{ fromJson(steps.ReadSecrets.outputs.Secrets).spPassword }}
          TRASERInternalFeedsToken: ${{ fromJson(steps.ReadSecrets.outputs.Secrets).TRASERInternalFeedsToken }}

      - name: Post Container URL Comment
        if: steps.createContainer.outputs.containerUrl != ''
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const containerUrl = '${{ steps.createContainer.outputs.containerUrl }}';
            const containerName = '${{ steps.createContainer.outputs.containerName }}';
            
            const comment = `ðŸš€ **PR Container Ready!**
            
            Your pull request has been deployed to a dedicated test environment:
            
            ðŸ”— **[Access Test Environment](${containerUrl})**
            
            **Container:** \`${containerName}\`
            
            You can use this environment to:
            - Test your changes interactively
            - Perform manual testing
            - Share with stakeholders for review
            
            *The container will be automatically removed when this PR is closed.*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  UpdatePRContainer:
    needs: [ Initialization, Build, StatusCheck ]
    if: (!cancelled()) && needs.StatusCheck.outputs.prContainersEnabled == 'true' && github.event.action == 'synchronize'
    runs-on: ${{ fromJson(needs.StatusCheck.outputs.githubRunner) }}
    name: Update PR Container
    defaults:
      run:
        shell: ${{ needs.StatusCheck.outputs.githubRunnerShell }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          lfs: true
          ref: ${{ github.event_name == 'pull_request' && github.sha || format('refs/pull/{0}/merge', github.event.pull_request.number) }}

      - name: Read secrets
        id: ReadSecrets
        uses: lktraser/AL-Go-Actions/ReadSecrets@main
        with:
          shell: ${{ needs.StatusCheck.outputs.githubRunnerShell }}
          gitHubSecrets: ${{ toJson(secrets) }}
          getSecrets: 'containerUsername,containerPassword,spUsername,spPassword,TRASERInternalFeedsToken'

      - name: Update PR Container
        id: updateContainer
        uses: ./Actions/PRContainer
        with:
          shell: ${{ needs.StatusCheck.outputs.githubRunnerShell }}
          operation: 'update'
          prId: '${{ github.event.number }}'
          postComment: 'true'
        env:
          containerusername: ${{ fromJson(steps.ReadSecrets.outputs.Secrets).containerUsername }}
          containerpassword: ${{ fromJson(steps.ReadSecrets.outputs.Secrets).containerPassword }}
          spusername: ${{ fromJson(steps.ReadSecrets.outputs.Secrets).spUsername }}
          sppassword: ${{ fromJson(steps.ReadSecrets.outputs.Secrets).spPassword }}
          TRASERInternalFeedsToken: ${{ fromJson(steps.ReadSecrets.outputs.Secrets).TRASERInternalFeedsToken }}

      - name: Post Update Comment
        if: steps.updateContainer.outputs.containerUrl != ''
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const containerUrl = '${{ steps.updateContainer.outputs.containerUrl }}';
            const containerName = '${{ steps.updateContainer.outputs.containerName }}';
            
            const comment = `ðŸ”„ **PR Container Updated!**
            
            Your test environment has been updated with the latest changes:
            
            ðŸ”— **[Access Updated Environment](${containerUrl})**
            
            **Container:** \`${containerName}\`
            
            The container now includes all changes from this PR update.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  PostProcess:
    needs: [ Initialization, StatusCheck, CreatePRContainer, UpdatePRContainer ]
    if: (!cancelled())
    runs-on: [ windows-latest ]
    name: Finalize the workflow
    steps:
      - name: Finalize the workflow
        id: PostProcess
        uses: lktraser/AL-Go-Actions/WorkflowPostProcess@main
        if: success() || failure()
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          shell: powershell
          telemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          currentJobContext: ${{ toJson(job) }}
